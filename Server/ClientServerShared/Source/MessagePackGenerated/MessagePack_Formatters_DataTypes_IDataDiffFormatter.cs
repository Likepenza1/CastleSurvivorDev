// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.DataTypes
{
    public sealed class IDataDiffFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DataTypes.IDataDiff>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IDataDiffFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(14, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::DataTypes.Fields.IntDataFieldDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::DataTypes.Fields.StringDataFieldDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::DataTypes.DataDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
                { typeof(global::DataTypes.Collections.DictionaryDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(3, 3) },
                { typeof(global::DataTypes.Collections.StringDictionaryItemDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(4, 4) },
                { typeof(global::DataTypes.Fields.ByteDataFieldDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(5, 5) },
                { typeof(global::DataTypes.Fields.ULongDataFieldDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(6, 6) },
                { typeof(global::DataTypes.Fields.LongDataFieldDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(7, 7) },
                { typeof(global::DataTypes.Fields.BoolDataFieldDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(8, 8) },
                { typeof(global::DataTypes.Collections.IntDictionaryItemDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(9, 9) },
                { typeof(global::DataTypes.Fields.Vector2IntDataFieldDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(10, 10) },
                { typeof(global::DataTypes.Fields.FloatDataFieldDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(11, 11) },
                { typeof(global::DataTypes.Fields.Vector3DataFieldDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(12, 12) },
                { typeof(global::DataTypes.Collections.Vector2IntDictionaryItemDiff).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(13, 13) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(14)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
                { 7, 7 },
                { 8, 8 },
                { 9, 9 },
                { 10, 10 },
                { 11, 11 },
                { 12, 12 },
                { 13, 13 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::DataTypes.IDataDiff value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.IntDataFieldDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Fields.IntDataFieldDiff)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.StringDataFieldDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Fields.StringDataFieldDiff)value, options);
                        break;
                    case 2:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.DataDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.DataDiff)value, options);
                        break;
                    case 3:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.DictionaryDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Collections.DictionaryDiff)value, options);
                        break;
                    case 4:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.StringDictionaryItemDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Collections.StringDictionaryItemDiff)value, options);
                        break;
                    case 5:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.ByteDataFieldDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Fields.ByteDataFieldDiff)value, options);
                        break;
                    case 6:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.ULongDataFieldDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Fields.ULongDataFieldDiff)value, options);
                        break;
                    case 7:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.LongDataFieldDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Fields.LongDataFieldDiff)value, options);
                        break;
                    case 8:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.BoolDataFieldDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Fields.BoolDataFieldDiff)value, options);
                        break;
                    case 9:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.IntDictionaryItemDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Collections.IntDictionaryItemDiff)value, options);
                        break;
                    case 10:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.Vector2IntDataFieldDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Fields.Vector2IntDataFieldDiff)value, options);
                        break;
                    case 11:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.FloatDataFieldDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Fields.FloatDataFieldDiff)value, options);
                        break;
                    case 12:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.Vector3DataFieldDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Fields.Vector3DataFieldDiff)value, options);
                        break;
                    case 13:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.Vector2IntDictionaryItemDiff>(options.Resolver).Serialize(ref writer, (global::DataTypes.Collections.Vector2IntDictionaryItemDiff)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::DataTypes.IDataDiff Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::DataTypes.IDataDiff");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::DataTypes.IDataDiff result = null;
            switch (key)
            {
                case 0:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.IntDataFieldDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.StringDataFieldDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.DataDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.DictionaryDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.StringDictionaryItemDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.ByteDataFieldDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.ULongDataFieldDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 7:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.LongDataFieldDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 8:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.BoolDataFieldDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 9:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.IntDictionaryItemDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 10:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.Vector2IntDataFieldDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 11:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.FloatDataFieldDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 12:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Fields.Vector3DataFieldDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 13:
                    result = (global::DataTypes.IDataDiff)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.Vector2IntDictionaryItemDiff>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
