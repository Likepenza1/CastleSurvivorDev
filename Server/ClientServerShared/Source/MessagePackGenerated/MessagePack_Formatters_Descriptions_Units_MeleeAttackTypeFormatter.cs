// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Descriptions.Units
{
    public sealed class MeleeAttackTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Descriptions.Units.MeleeAttackType>
    {
        // Range
        private static global::System.ReadOnlySpan<byte> GetSpan_Range() => new byte[1 + 5] { 165, 82, 97, 110, 103, 101 };
        // Interval
        private static global::System.ReadOnlySpan<byte> GetSpan_Interval() => new byte[1 + 8] { 168, 73, 110, 116, 101, 114, 118, 97, 108 };
        // AnimationTime
        private static global::System.ReadOnlySpan<byte> GetSpan_AnimationTime() => new byte[1 + 13] { 173, 65, 110, 105, 109, 97, 116, 105, 111, 110, 84, 105, 109, 101 };
        // HitFx
        private static global::System.ReadOnlySpan<byte> GetSpan_HitFx() => new byte[1 + 5] { 165, 72, 105, 116, 70, 120 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Descriptions.Units.MeleeAttackType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Range());
            writer.Write(value.Range);
            writer.WriteRaw(GetSpan_Interval());
            writer.Write(value.Interval);
            writer.WriteRaw(GetSpan_AnimationTime());
            writer.Write(value.AnimationTime);
            writer.WriteRaw(GetSpan_HitFx());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.AddressableAsset<global::UnityEngine.GameObject>>(formatterResolver).Serialize(ref writer, value.HitFx, options);
        }

        public global::Descriptions.Units.MeleeAttackType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Descriptions.Units.MeleeAttackType();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 435526984018UL:
                                ____result.Range = reader.ReadSingle();
                                continue;
                            case 516578109768UL:
                                ____result.HitFx = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.AddressableAsset<global::UnityEngine.GameObject>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7809653462537629257UL) { goto FAIL; }

                        ____result.Interval = reader.ReadSingle();
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AnimationTime().Slice(1))) { goto FAIL; }

                        ____result.AnimationTime = reader.ReadSingle();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
