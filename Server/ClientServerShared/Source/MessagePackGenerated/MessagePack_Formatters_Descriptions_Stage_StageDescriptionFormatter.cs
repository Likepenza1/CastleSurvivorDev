// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Descriptions.Stage
{
    public sealed class StageDescriptionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Descriptions.Stage.StageDescription>
    {
        // PlayerHealth
        private static global::System.ReadOnlySpan<byte> GetSpan_PlayerHealth() => new byte[1 + 12] { 172, 80, 108, 97, 121, 101, 114, 72, 101, 97, 108, 116, 104 };
        // EachPlayerDamage
        private static global::System.ReadOnlySpan<byte> GetSpan_EachPlayerDamage() => new byte[1 + 16] { 176, 69, 97, 99, 104, 80, 108, 97, 121, 101, 114, 68, 97, 109, 97, 103, 101 };
        // Scene
        private static global::System.ReadOnlySpan<byte> GetSpan_Scene() => new byte[1 + 5] { 165, 83, 99, 101, 110, 101 };
        // Waves
        private static global::System.ReadOnlySpan<byte> GetSpan_Waves() => new byte[1 + 5] { 165, 87, 97, 118, 101, 115 };
        // CompleteReward
        private static global::System.ReadOnlySpan<byte> GetSpan_CompleteReward() => new byte[1 + 14] { 174, 67, 111, 109, 112, 108, 101, 116, 101, 82, 101, 119, 97, 114, 100 };
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Descriptions.Stage.StageDescription value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_PlayerHealth());
            writer.Write(value.PlayerHealth);
            writer.WriteRaw(GetSpan_EachPlayerDamage());
            writer.Write(value.EachPlayerDamage);
            writer.WriteRaw(GetSpan_Scene());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.SceneReference>(formatterResolver).Serialize(ref writer, value.Scene, options);
            writer.WriteRaw(GetSpan_Waves());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Stage.WaveDescription[]>(formatterResolver).Serialize(ref writer, value.Waves, options);
            writer.WriteRaw(GetSpan_CompleteReward());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Rewards.IReward>(formatterResolver).Serialize(ref writer, value.CompleteReward, options);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
        }

        public global::Descriptions.Stage.StageDescription Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Descriptions.Stage.StageDescription();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PlayerHealth().Slice(1))) { goto FAIL; }

                        ____result.PlayerHealth = reader.ReadSingle();
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_EachPlayerDamage().Slice(1))) { goto FAIL; }

                        ____result.EachPlayerDamage = reader.ReadSingle();
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 435643835219UL:
                                ____result.Scene = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.SceneReference>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 495623496023UL:
                                ____result.Waves = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Stage.WaveDescription[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CompleteReward().Slice(1))) { goto FAIL; }

                        ____result.CompleteReward = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Rewards.IReward>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
