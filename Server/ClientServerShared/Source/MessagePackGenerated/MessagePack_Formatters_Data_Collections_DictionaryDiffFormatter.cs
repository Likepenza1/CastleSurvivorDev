// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Data.Collections
{
    public sealed class DictionaryDiffFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DataTypes.Collections.DictionaryDiff>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::DataTypes.Collections.DictionaryDiff value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.DiffType>(formatterResolver).Serialize(ref writer, value.DiffType, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.IDataDiff[]>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::DataTypes.Collections.DictionaryDiff Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Data__ = default(global::DataTypes.IDataDiff[]);
            var __DiffType__ = default(global::DataTypes.Collections.DiffType);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __DiffType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.Collections.DiffType>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Data__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::DataTypes.IDataDiff[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::DataTypes.Collections.DictionaryDiff(__DiffType__, __Data__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
