// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Descriptions.Stage
{
    public sealed class SpecialUnitSpawnInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Descriptions.Stage.SpecialUnitSpawnInfo>
    {
        // UnitInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_UnitInfo() => new byte[1 + 8] { 168, 85, 110, 105, 116, 73, 110, 102, 111 };
        // Unit
        private static global::System.ReadOnlySpan<byte> GetSpan_Unit() => new byte[1 + 4] { 164, 85, 110, 105, 116 };
        // DelaySinceStart
        private static global::System.ReadOnlySpan<byte> GetSpan_DelaySinceStart() => new byte[1 + 15] { 175, 68, 101, 108, 97, 121, 83, 105, 110, 99, 101, 83, 116, 97, 114, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Descriptions.Stage.SpecialUnitSpawnInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_UnitInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UnitInfo, options);
            writer.WriteRaw(GetSpan_Unit());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.DescriptionReference>(formatterResolver).Serialize(ref writer, value.Unit, options);
            writer.WriteRaw(GetSpan_DelaySinceStart());
            writer.Write(value.DelaySinceStart);
        }

        public global::Descriptions.Stage.SpecialUnitSpawnInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Descriptions.Stage.SpecialUnitSpawnInfo();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8027224647599222357UL) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1953066581UL) { goto FAIL; }

                        ____result.Unit = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.DescriptionReference>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DelaySinceStart().Slice(1))) { goto FAIL; }

                        ____result.DelaySinceStart = reader.ReadSingle();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
