// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Descriptions.Stage
{
    public sealed class WaveDescriptionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Descriptions.Stage.WaveDescription>
    {
        // SpawnWaveDuration
        private static global::System.ReadOnlySpan<byte> GetSpan_SpawnWaveDuration() => new byte[1 + 17] { 177, 83, 112, 97, 119, 110, 87, 97, 118, 101, 68, 117, 114, 97, 116, 105, 111, 110 };
        // WaveStartDelay
        private static global::System.ReadOnlySpan<byte> GetSpan_WaveStartDelay() => new byte[1 + 14] { 174, 87, 97, 118, 101, 83, 116, 97, 114, 116, 68, 101, 108, 97, 121 };
        // DamagePercentModifier
        private static global::System.ReadOnlySpan<byte> GetSpan_DamagePercentModifier() => new byte[1 + 21] { 181, 68, 97, 109, 97, 103, 101, 80, 101, 114, 99, 101, 110, 116, 77, 111, 100, 105, 102, 105, 101, 114 };
        // HealthPercentModifier
        private static global::System.ReadOnlySpan<byte> GetSpan_HealthPercentModifier() => new byte[1 + 21] { 181, 72, 101, 97, 108, 116, 104, 80, 101, 114, 99, 101, 110, 116, 77, 111, 100, 105, 102, 105, 101, 114 };
        // MoveSpeedMultiplier
        private static global::System.ReadOnlySpan<byte> GetSpan_MoveSpeedMultiplier() => new byte[1 + 19] { 179, 77, 111, 118, 101, 83, 112, 101, 101, 100, 77, 117, 108, 116, 105, 112, 108, 105, 101, 114 };
        // CommonUnits
        private static global::System.ReadOnlySpan<byte> GetSpan_CommonUnits() => new byte[1 + 11] { 171, 67, 111, 109, 109, 111, 110, 85, 110, 105, 116, 115 };
        // SpecialUnits
        private static global::System.ReadOnlySpan<byte> GetSpan_SpecialUnits() => new byte[1 + 12] { 172, 83, 112, 101, 99, 105, 97, 108, 85, 110, 105, 116, 115 };
        // Reward
        private static global::System.ReadOnlySpan<byte> GetSpan_Reward() => new byte[1 + 6] { 166, 82, 101, 119, 97, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Descriptions.Stage.WaveDescription value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(8);
            writer.WriteRaw(GetSpan_SpawnWaveDuration());
            writer.Write(value.SpawnWaveDuration);
            writer.WriteRaw(GetSpan_WaveStartDelay());
            writer.Write(value.WaveStartDelay);
            writer.WriteRaw(GetSpan_DamagePercentModifier());
            writer.Write(value.DamagePercentModifier);
            writer.WriteRaw(GetSpan_HealthPercentModifier());
            writer.Write(value.HealthPercentModifier);
            writer.WriteRaw(GetSpan_MoveSpeedMultiplier());
            writer.Write(value.MoveSpeedMultiplier);
            writer.WriteRaw(GetSpan_CommonUnits());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Stage.CommonUnitsSpawnInfo[]>(formatterResolver).Serialize(ref writer, value.CommonUnits, options);
            writer.WriteRaw(GetSpan_SpecialUnits());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Stage.SpecialUnitSpawnInfo[]>(formatterResolver).Serialize(ref writer, value.SpecialUnits, options);
            writer.WriteRaw(GetSpan_Reward());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Rewards.IReward>(formatterResolver).Serialize(ref writer, value.Reward, options);
        }

        public global::Descriptions.Stage.WaveDescription Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Descriptions.Stage.WaveDescription();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SpawnWaveDuration().Slice(1))) { goto FAIL; }

                        ____result.SpawnWaveDuration = reader.ReadSingle();
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_WaveStartDelay().Slice(1))) { goto FAIL; }

                        ____result.WaveStartDelay = reader.ReadSingle();
                        continue;
                    case 21:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7300446490658169156UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DamagePercentModifier().Slice(1 + 8))) { goto FAIL; }

                                ____result.DamagePercentModifier = reader.ReadSingle();
                                continue;

                            case 7300449845211391304UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_HealthPercentModifier().Slice(1 + 8))) { goto FAIL; }

                                ____result.HealthPercentModifier = reader.ReadSingle();
                                continue;

                        }
                    case 19:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MoveSpeedMultiplier().Slice(1))) { goto FAIL; }

                        ____result.MoveSpeedMultiplier = reader.ReadSingle();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CommonUnits().Slice(1))) { goto FAIL; }

                        ____result.CommonUnits = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Stage.CommonUnitsSpawnInfo[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SpecialUnits().Slice(1))) { goto FAIL; }

                        ____result.SpecialUnits = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Stage.SpecialUnitSpawnInfo[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110442424264018UL) { goto FAIL; }

                        ____result.Reward = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Rewards.IReward>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
