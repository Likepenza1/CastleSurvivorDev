// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Descriptions.Items
{
    public sealed class ItemDescriptionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Descriptions.Items.ItemDescription>
    {
        // Prefab
        private static global::System.ReadOnlySpan<byte> GetSpan_Prefab() => new byte[1 + 6] { 166, 80, 114, 101, 102, 97, 98 };
        // Icon
        private static global::System.ReadOnlySpan<byte> GetSpan_Icon() => new byte[1 + 4] { 164, 73, 99, 111, 110 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Descriptions.Items.ItemDescription value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Prefab());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.AddressableAsset<global::UnityEngine.GameObject>>(formatterResolver).Serialize(ref writer, value.Prefab, options);
            writer.WriteRaw(GetSpan_Icon());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.SpriteReference>(formatterResolver).Serialize(ref writer, value.Icon, options);
            writer.WriteRaw(GetSpan_Type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Items.ItemType>(formatterResolver).Serialize(ref writer, value.Type, options);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
        }

        public global::Descriptions.Items.ItemDescription Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Descriptions.Items.ItemDescription();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 108170469274192UL) { goto FAIL; }

                        ____result.Prefab = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.AddressableAsset<global::UnityEngine.GameObject>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1852793673UL:
                                ____result.Icon = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Types.SpriteReference>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1701869908UL:
                                ____result.Type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Items.ItemType>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
