// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Descriptions
{
    public sealed class GameRulesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Descriptions.GameRules>
    {
        // ServerDescription
        private static global::System.ReadOnlySpan<byte> GetSpan_ServerDescription() => new byte[1 + 17] { 177, 83, 101, 114, 118, 101, 114, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        // AppearanceDescription
        private static global::System.ReadOnlySpan<byte> GetSpan_AppearanceDescription() => new byte[1 + 21] { 181, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        // StagesSequence
        private static global::System.ReadOnlySpan<byte> GetSpan_StagesSequence() => new byte[1 + 14] { 174, 83, 116, 97, 103, 101, 115, 83, 101, 113, 117, 101, 110, 99, 101 };
        // Scenes
        private static global::System.ReadOnlySpan<byte> GetSpan_Scenes() => new byte[1 + 6] { 166, 83, 99, 101, 110, 101, 115 };
        // Player
        private static global::System.ReadOnlySpan<byte> GetSpan_Player() => new byte[1 + 6] { 166, 80, 108, 97, 121, 101, 114 };
        // Items
        private static global::System.ReadOnlySpan<byte> GetSpan_Items() => new byte[1 + 5] { 165, 73, 116, 101, 109, 115 };
        // Resources
        private static global::System.ReadOnlySpan<byte> GetSpan_Resources() => new byte[1 + 9] { 169, 82, 101, 115, 111, 117, 114, 99, 101, 115 };
        // Upgrades
        private static global::System.ReadOnlySpan<byte> GetSpan_Upgrades() => new byte[1 + 8] { 168, 85, 112, 103, 114, 97, 100, 101, 115 };
        // Stages
        private static global::System.ReadOnlySpan<byte> GetSpan_Stages() => new byte[1 + 6] { 166, 83, 116, 97, 103, 101, 115 };
        // Units
        private static global::System.ReadOnlySpan<byte> GetSpan_Units() => new byte[1 + 5] { 165, 85, 110, 105, 116, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Descriptions.GameRules value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(GetSpan_ServerDescription());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.ServerDescription>(formatterResolver).Serialize(ref writer, value.ServerDescription, options);
            writer.WriteRaw(GetSpan_AppearanceDescription());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.AppearanceDescription>(formatterResolver).Serialize(ref writer, value.AppearanceDescription, options);
            writer.WriteRaw(GetSpan_StagesSequence());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.StagesSequenceDescription>(formatterResolver).Serialize(ref writer, value.StagesSequence, options);
            writer.WriteRaw(GetSpan_Scenes());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.ScenesDescription>(formatterResolver).Serialize(ref writer, value.Scenes, options);
            writer.WriteRaw(GetSpan_Player());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.PlayerDescription>(formatterResolver).Serialize(ref writer, value.Player, options);
            writer.WriteRaw(GetSpan_Items());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Items.ItemDescription>>(formatterResolver).Serialize(ref writer, value.Items, options);
            writer.WriteRaw(GetSpan_Resources());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Main.ResourceDescription>>(formatterResolver).Serialize(ref writer, value.Resources, options);
            writer.WriteRaw(GetSpan_Upgrades());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Upgrades.UpgradeDescription>>(formatterResolver).Serialize(ref writer, value.Upgrades, options);
            writer.WriteRaw(GetSpan_Stages());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Stage.StageDescription>>(formatterResolver).Serialize(ref writer, value.Stages, options);
            writer.WriteRaw(GetSpan_Units());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Units.UnitDescription>>(formatterResolver).Serialize(ref writer, value.Units, options);
        }

        public global::Descriptions.GameRules Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Descriptions.GameRules();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ServerDescription().Slice(1))) { goto FAIL; }

                        ____result.ServerDescription = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.ServerDescription>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 21:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AppearanceDescription().Slice(1))) { goto FAIL; }

                        ____result.AppearanceDescription = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.AppearanceDescription>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_StagesSequence().Slice(1))) { goto FAIL; }

                        ____result.StagesSequence = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.StagesSequenceDescription>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 126879481029459UL:
                                ____result.Scenes = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.ScenesDescription>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 125780153691216UL:
                                ____result.Player = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Descriptions.Main.PlayerDescription>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 126879363331155UL:
                                ____result.Stages = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Stage.StageDescription>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 495756604489UL:
                                ____result.Items = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Items.ItemDescription>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 495874305621UL:
                                ____result.Units = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Units.UnitDescription>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Resources().Slice(1))) { goto FAIL; }

                        ____result.Resources = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Main.ResourceDescription>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8315162656703475797UL) { goto FAIL; }

                        ____result.Upgrades = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Upgrades.UpgradeDescription>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
