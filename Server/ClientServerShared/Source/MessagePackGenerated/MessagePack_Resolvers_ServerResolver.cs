// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class ServerResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new ServerResolver();

        private ServerResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = ServerResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class ServerResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static ServerResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(67)
            {
                { typeof(global::DataTypes.IDataDiff[]), 0 },
                { typeof(global::Descriptions.Rewards.IReward[]), 1 },
                { typeof(global::Descriptions.Stage.CommonUnitsSpawnInfo[]), 2 },
                { typeof(global::Descriptions.Stage.SpecialUnitSpawnInfo[]), 3 },
                { typeof(global::Descriptions.Stage.WaveDescription[]), 4 },
                { typeof(global::Descriptions.Types.AddressableAsset<global::UnityEngine.GameObject>), 5 },
                { typeof(global::Descriptions.Types.DescriptionReference[]), 6 },
                { typeof(global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Items.ItemDescription>), 7 },
                { typeof(global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Main.ResourceDescription>), 8 },
                { typeof(global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Stage.StageDescription>), 9 },
                { typeof(global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Units.UnitDescription>), 10 },
                { typeof(global::System.Collections.Generic.IReadOnlyDictionary<string, global::Descriptions.Upgrades.UpgradeDescription>), 11 },
                { typeof(global::System.Collections.Generic.List<global::Descriptions.Upgrades.UpgradeLevelDescription>), 12 },
                { typeof(global::UnityEngine.Color[]), 13 },
                { typeof(global::DataTypes.Collections.CollectionDiffType), 14 },
                { typeof(global::DataTypes.Collections.DiffType), 15 },
                { typeof(global::Descriptions.Items.ItemType), 16 },
                { typeof(global::DataTypes.IDataDiff), 17 },
                { typeof(global::Descriptions.Rewards.IReward), 18 },
                { typeof(global::Descriptions.Units.BaseAttackType), 19 },
                { typeof(global::Network.Messages.IMessage), 20 },
                { typeof(global::DataTypes.Collections.DictionaryDiff), 21 },
                { typeof(global::DataTypes.Collections.IntDictionaryItemDiff), 22 },
                { typeof(global::DataTypes.Collections.StringDictionaryItemDiff), 23 },
                { typeof(global::DataTypes.Collections.Vector2IntDictionaryItemDiff), 24 },
                { typeof(global::DataTypes.DataDiff), 25 },
                { typeof(global::DataTypes.Fields.BoolDataFieldDiff), 26 },
                { typeof(global::DataTypes.Fields.ByteDataFieldDiff), 27 },
                { typeof(global::DataTypes.Fields.FloatDataFieldDiff), 28 },
                { typeof(global::DataTypes.Fields.IntDataFieldDiff), 29 },
                { typeof(global::DataTypes.Fields.LongDataFieldDiff), 30 },
                { typeof(global::DataTypes.Fields.StringDataFieldDiff), 31 },
                { typeof(global::DataTypes.Fields.ULongDataFieldDiff), 32 },
                { typeof(global::DataTypes.Fields.Vector2IntDataFieldDiff), 33 },
                { typeof(global::DataTypes.Fields.Vector3DataFieldDiff), 34 },
                { typeof(global::Descriptions.GameRules), 35 },
                { typeof(global::Descriptions.Items.ItemDescription), 36 },
                { typeof(global::Descriptions.Main.AppearanceDescription), 37 },
                { typeof(global::Descriptions.Main.PlayerDescription), 38 },
                { typeof(global::Descriptions.Main.ResourceDescription), 39 },
                { typeof(global::Descriptions.Main.ScenesDescription), 40 },
                { typeof(global::Descriptions.Main.ServerDescription), 41 },
                { typeof(global::Descriptions.Main.StagesSequenceDescription), 42 },
                { typeof(global::Descriptions.Rewards.CompositeReward), 43 },
                { typeof(global::Descriptions.Rewards.ResourceReward), 44 },
                { typeof(global::Descriptions.Stage.CommonUnitsSpawnInfo), 45 },
                { typeof(global::Descriptions.Stage.SpecialUnitSpawnInfo), 46 },
                { typeof(global::Descriptions.Stage.StageDescription), 47 },
                { typeof(global::Descriptions.Stage.WaveDescription), 48 },
                { typeof(global::Descriptions.Types.DescriptionReference), 49 },
                { typeof(global::Descriptions.Types.ResourceReference), 50 },
                { typeof(global::Descriptions.Types.SceneReference), 51 },
                { typeof(global::Descriptions.Types.SpriteReference), 52 },
                { typeof(global::Descriptions.Units.MeleeAttackType), 53 },
                { typeof(global::Descriptions.Units.RangedAttackType), 54 },
                { typeof(global::Descriptions.Units.UnitDescription), 55 },
                { typeof(global::Descriptions.Upgrades.UpgradeDescription), 56 },
                { typeof(global::Descriptions.Upgrades.UpgradeLevelDescription), 57 },
                { typeof(global::Descriptions.Upgrades.UpgradeReference), 58 },
                { typeof(global::Game.Player.Upgrades.UpgradeMessage), 59 },
                { typeof(global::Messages.FinishStageMessage), 60 },
                { typeof(global::Messages.GetRewardCheatMessage), 61 },
                { typeof(global::Messages.LoginConfirmMessage), 62 },
                { typeof(global::Messages.LoginMessage), 63 },
                { typeof(global::Messages.LogMessage), 64 },
                { typeof(global::Messages.PlayerDiffMessage), 65 },
                { typeof(global::Messages.TestMessage), 66 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::DataTypes.IDataDiff>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::Descriptions.Rewards.IReward>();
                case 2: return new global::MessagePack.Formatters.ArrayFormatter<global::Descriptions.Stage.CommonUnitsSpawnInfo>();
                case 3: return new global::MessagePack.Formatters.ArrayFormatter<global::Descriptions.Stage.SpecialUnitSpawnInfo>();
                case 4: return new global::MessagePack.Formatters.ArrayFormatter<global::Descriptions.Stage.WaveDescription>();
                case 5: return new MessagePack.Formatters.Descriptions.Types.AddressableAssetFormatter<global::UnityEngine.GameObject>();
                case 6: return new global::MessagePack.Formatters.ArrayFormatter<global::Descriptions.Types.DescriptionReference>();
                case 7: return new global::MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter<string, global::Descriptions.Items.ItemDescription>();
                case 8: return new global::MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter<string, global::Descriptions.Main.ResourceDescription>();
                case 9: return new global::MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter<string, global::Descriptions.Stage.StageDescription>();
                case 10: return new global::MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter<string, global::Descriptions.Units.UnitDescription>();
                case 11: return new global::MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter<string, global::Descriptions.Upgrades.UpgradeDescription>();
                case 12: return new global::MessagePack.Formatters.ListFormatter<global::Descriptions.Upgrades.UpgradeLevelDescription>();
                case 13: return new global::MessagePack.Formatters.ArrayFormatter<global::UnityEngine.Color>();
                case 14: return new MessagePack.Formatters.DataTypes.Collections.CollectionDiffTypeFormatter();
                case 15: return new MessagePack.Formatters.DataTypes.Collections.DiffTypeFormatter();
                case 16: return new MessagePack.Formatters.Descriptions.Items.ItemTypeFormatter();
                case 17: return new MessagePack.Formatters.DataTypes.IDataDiffFormatter();
                case 18: return new MessagePack.Formatters.Descriptions.Rewards.IRewardFormatter();
                case 19: return new MessagePack.Formatters.Descriptions.Units.BaseAttackTypeFormatter();
                case 20: return new MessagePack.Formatters.Network.Messages.IMessageFormatter();
                case 21: return new MessagePack.Formatters.DataTypes.Collections.DictionaryDiffFormatter();
                case 22: return new MessagePack.Formatters.DataTypes.Collections.IntDictionaryItemDiffFormatter();
                case 23: return new MessagePack.Formatters.DataTypes.Collections.StringDictionaryItemDiffFormatter();
                case 24: return new MessagePack.Formatters.DataTypes.Collections.Vector2IntDictionaryItemDiffFormatter();
                case 25: return new MessagePack.Formatters.DataTypes.DataDiffFormatter();
                case 26: return new MessagePack.Formatters.DataTypes.Fields.BoolDataFieldDiffFormatter();
                case 27: return new MessagePack.Formatters.DataTypes.Fields.ByteDataFieldDiffFormatter();
                case 28: return new MessagePack.Formatters.DataTypes.Fields.FloatDataFieldDiffFormatter();
                case 29: return new MessagePack.Formatters.DataTypes.Fields.IntDataFieldDiffFormatter();
                case 30: return new MessagePack.Formatters.DataTypes.Fields.LongDataFieldDiffFormatter();
                case 31: return new MessagePack.Formatters.DataTypes.Fields.StringDataFieldDiffFormatter();
                case 32: return new MessagePack.Formatters.DataTypes.Fields.ULongDataFieldDiffFormatter();
                case 33: return new MessagePack.Formatters.DataTypes.Fields.Vector2IntDataFieldDiffFormatter();
                case 34: return new MessagePack.Formatters.DataTypes.Fields.Vector3DataFieldDiffFormatter();
                case 35: return new MessagePack.Formatters.Descriptions.GameRulesFormatter();
                case 36: return new MessagePack.Formatters.Descriptions.Items.ItemDescriptionFormatter();
                case 37: return new MessagePack.Formatters.Descriptions.Main.AppearanceDescriptionFormatter();
                case 38: return new MessagePack.Formatters.Descriptions.Main.PlayerDescriptionFormatter();
                case 39: return new MessagePack.Formatters.Descriptions.Main.ResourceDescriptionFormatter();
                case 40: return new MessagePack.Formatters.Descriptions.Main.ScenesDescriptionFormatter();
                case 41: return new MessagePack.Formatters.Descriptions.Main.ServerDescriptionFormatter();
                case 42: return new MessagePack.Formatters.Descriptions.Main.StagesSequenceDescriptionFormatter();
                case 43: return new MessagePack.Formatters.Descriptions.Rewards.CompositeRewardFormatter();
                case 44: return new MessagePack.Formatters.Descriptions.Rewards.ResourceRewardFormatter();
                case 45: return new MessagePack.Formatters.Descriptions.Stage.CommonUnitsSpawnInfoFormatter();
                case 46: return new MessagePack.Formatters.Descriptions.Stage.SpecialUnitSpawnInfoFormatter();
                case 47: return new MessagePack.Formatters.Descriptions.Stage.StageDescriptionFormatter();
                case 48: return new MessagePack.Formatters.Descriptions.Stage.WaveDescriptionFormatter();
                case 49: return new MessagePack.Formatters.Descriptions.Types.DescriptionReferenceFormatter();
                case 50: return new MessagePack.Formatters.Descriptions.Types.ResourceReferenceFormatter();
                case 51: return new MessagePack.Formatters.Descriptions.Types.SceneReferenceFormatter();
                case 52: return new MessagePack.Formatters.Descriptions.Types.SpriteReferenceFormatter();
                case 53: return new MessagePack.Formatters.Descriptions.Units.MeleeAttackTypeFormatter();
                case 54: return new MessagePack.Formatters.Descriptions.Units.RangedAttackTypeFormatter();
                case 55: return new MessagePack.Formatters.Descriptions.Units.UnitDescriptionFormatter();
                case 56: return new MessagePack.Formatters.Descriptions.Upgrades.UpgradeDescriptionFormatter();
                case 57: return new MessagePack.Formatters.Descriptions.Upgrades.UpgradeLevelDescriptionFormatter();
                case 58: return new MessagePack.Formatters.Descriptions.Upgrades.UpgradeReferenceFormatter();
                case 59: return new MessagePack.Formatters.Game.Player.Upgrades.UpgradeMessageFormatter();
                case 60: return new MessagePack.Formatters.Messages.FinishStageMessageFormatter();
                case 61: return new MessagePack.Formatters.Messages.GetRewardCheatMessageFormatter();
                case 62: return new MessagePack.Formatters.Messages.LoginConfirmMessageFormatter();
                case 63: return new MessagePack.Formatters.Messages.LoginMessageFormatter();
                case 64: return new MessagePack.Formatters.Messages.LogMessageFormatter();
                case 65: return new MessagePack.Formatters.Messages.PlayerDiffMessageFormatter();
                case 66: return new MessagePack.Formatters.Messages.TestMessageFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name
